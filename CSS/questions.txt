----------- What is the CSS Box Model? ---------

- it's a model that the browser uses to represent an HTML element on the page
- everything on a web page can be viewed as a box
- the box model has four parts
    - content box; defines the content area
    - padding box; defines the area between the content and border
    - border box; sits between padding and margin; wraps content and padding
    - margin box; the outermost box; wraps content, padding, and border

--------- What does box-sizing do? ----------

- the box-sizing property controls how the total width and height of an element is calculated
- its default value is content-box
    - this means that, by default, the height and width properties only define the content area of an element (the size of the content box)
        - it doesn't take padding and border into account
        - e.g. if you set the width of an element to 100px, its content box will be 100px wide
            - any border or padding you add to it will be added to 100px
            - so the total width of the element will be more than 100px
    - if you set it to border-box, then any width and height you apply to an element will define the total area of an element
        - this allows you to use the alternative box model
        - it takes any border and padding into account
        - the border box will be used as the defined area
        - e.g. if you set the width of an element to 100px, then that will include any border and padding you add to it

--------- Block vs inline vs inline-block display --------

display
- specifies the display behavior of an element
- can be block, inline, or inline-block

block display
- a block element occupies the entire width of its parent
- causes a line break at the end
    - block elements are stacked on top of each other
- height and width are respected
- padding, border, and margin will push away surrounding elements
- flex, grid, list-item, and table display also produce block-level boxes
- e.g. h1, p, div

inline display
- occupies only the space that is needed by the element's content
- does not cause a line break
    - appear beside each other in the same line
- height and width are not applied
- vertical padding, border, and margin will not push away surrounding elements
- transforms don't work
- e.g. a, span, em, strong, before and after pseudo-elements have inline display by default

inline-block display
- it is like an inline box that adheres to the box model
- occupies only the space that is needed by the element's content
- does not cause a line break
- height and width are applied
- padding, border, and margin will push away surrounding elements
- can be transformed
- img elements are treated like inline-block elements
    - they flow inline like text, but they also have a width and height like block elements
- e.g. img, button

--------- Static vs relative vs absolute vs fixed positioning ----------

position
- sets how an element is positioned in a document

A positioned element
- an element whose positioning is anything other than static

Static positioning
- the default positioning of elements
- The element is positioned according to the normal flow of the document

Relative positioning
- the element is positioned according to the normal flow
- however its position can be changed relative to its normal position based on the values of top, right, bottom, and left
- it will not affect the position of its surrounding elements

Absolute positioning
- the element is removed from the normal flow
- the element is positioned relative to the nearest positioned ancestor based on the values of top, right, bottom, and left
    - note that the height of the positioned ancestor will collapse
- if there isn't any positioned ancestor then the element will be positioned relative to the initial containing block (the viewport)

Fixed positioning
- element is removed from the normal flow
- the element remains fixed in one position
- element is positioned relative to the initial containing block (the viewport)
unless one of its ancestors has a transform, filter, or perspective set to something other than none
    - in that case, the ancestor will act as the initial containing block

--------- What is a selector? ----------

- a CSS selector is the part of a CSS rule that targets an HTML element for styling
based on various things like class, id, attribute, element type, etc.
- the selector selects an element to which the corresponding styles are applied

Types of selectors
- type selector
- class selector
- id selector
- attribute selector
- descendent combinator
- child combinator (>)
- general sibling combinator (~)
- adjacent sibling combinator (+)

Examples:

// this is a type selector; it selects every p element on the page
p {
    color: blue;
}

// this is a class selector; it selects the element with the class 'card'
.card {
    padding: 10px;
}

// this is an id selector; selects an element with the id 'item-1'
#item-1 {
    margin: 10px;
}

// using a descendent combinator; selects any p element which is a descendent of the element having 'card' class
// here p doesn't necessarily have to be a direct child of 'card'
.card p {
    font-size: 20px;
}

// using a child combinator here; this selects any p element which is a direct child of the element having 'card' class
.card > p {
    font-size: 20px;
}

---------- Pseudo-classes and pseudo-elements ---------

Pseudo-class
- a pseudo-class allows us to select an element in a specific state, e.g. hover, focus, etc.

Some pseudo-classes
- :active
- :hover
- :focus
- :link
- :visited
- :disabled

Pseudo-elements
- a pseudo-element allows us to target and style a specific part of the selected element

Some pseudo-elements
- ::before
- ::after
- ::placeholder
- ::first-line
- ::selection
- ::marker

::before
- this adds a pseudo-element as the first child of the selected element

::after
- adds a pseudo-element as the last child of the selected element

- ::before and ::after will not work on images because an image itself is the content
- ::before and ::after pseudo-elements are inline by default
- ::before and ::after are often used to add cosmetic or decorative content to an element by specifying the 'content' property

---------- CSS units ---------

Absolute unit
- px is an absolute unit
- it is a fixed unit that is not relative to anything

Relative units
- rem, em, vh, vw, and ch are some relative units
- they are relative to something
- relative units are useful for implementing responsive layouts and responsive fonts

rem
- the rem unit is relative to the root font size
- the root font size is the document's font size which is the browser default of 16px
- so, 2rem is equal 2 * 16px = 32px

em
- the em unit when used with non-distance related properties is relative to the parent's font size
- e.g. font-size of 3em is equal to 3 * 24 = 72px where the parent's font size is 24px
- when it is used with distance-related properties, it is relative to the element's own font size
- e.g. padding of 2em is equal to 2 * 24 = 48px where the element's font-size is 24px

vh and vw
- vh and vw are relative to viewport height and width respectively
- e.g. 20vw is 20% of viewport width

ch
- it is relative to the width of 0 of the font family that is used
- e.g. max-width: 50ch; this means roughly 50 characters wide

Percentage unit
- distance-related % values (width, height, padding, margin, etc.) are calculated relative to the parent's computed width
e.g. a p element has a padding of 10%; its parent's width is 200px; the p element's padding will be 0.1 * 200 = 20px
- non-distance % values (font-size, line-height, etc.) of an element are converted in relation to the parent's computed font-size
e.g. a p element has a font-size of 150%; its parent has a font-size of 16px; the p element's font size will be 1.5 * 16 = 24px

---------- Stacking context ----------

- a stacking context determines whether or not one element is rendered on top of another element
- stacking contexts are like layers stacked on top of one another
- stacking contexts determine in which order html elements are placed on the z-axis (pointing toward the user)
- html elements in the layer at the top of the stack remain on top of the elements in the layers below

Root stacking context
- the root stacking context is created by the root element (html) of the document
- all elements in the body are at least part of the root stacking context

Parent and child stacking contexts
- a parent stacking context can have multiple child stacking contexts
- The z-index values of child stacking contexts only have meaning within the parent stacking context

Stacking order
- the order in which elements are positioned on the z-axis
- the stacking context that is higher in the stacking order gets rendered on top of the one that is lower

z-index
- sets the z-order (position on the z-axis) of a positioned element and its descendants or flex items or grid items
- for z-index to have any effect, the element needs to be a positioned element
- creates a new stacking context
- default value is auto (z-index of 0)
- z-index values are scoped to a particular stacking context
    - they are compared only within the same stacking context

Default stacking order
- default stacking order is used when elements are not positioned or they don't have a z-index value other than 0
- in that case, elements are rendered according to the order in which they appear in the document (DOM order)

Stacking order of positioned elements with or without custom z-index
- any positioned elements (and their children) are displayed in front of any non-positioned elements (Flow, Flexbox, Grid)
    - note that the stacking order of positioned elements within themselves depends on their DOM order
- positioned elements with higher z-index values are stacked on top of those with lower z-index values
- positioned elements with a negative z-index value will be rendered behind any non-positioned element

Ways of forming a new stacking context
- When an element is the root element of a document (the <html> element)
- When an element has a position value other than static and a z-index value other than auto
    - note that when position is set to 'fixed' or 'sticky', no explicit z-index value is required
- When an element has an opacity value less than 1
- when a flex item or a grid item has a z-index value other than auto
- Applying a mix-blend-mode other than 'normal'
- properties like transform, filter, clip-path, perspective, mask, etc. also create stacking contexts if their values are anything other than 'none'
- Explicitly creating a context with isolation: isolate

