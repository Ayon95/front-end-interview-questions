----------- What is unidirectional data flow in React? ---------

- state is passed to the view and child components
- the view is rendered based on the state that it receives
- the view is the visual representation of the application state
- actions in the view, e.g. button click, trigger state changes
- state changes only when actions happen in the view
    - the view can never directly update the state
- state gets updated and the updated state is passed to the view and child components

state -> view -> actions -> state

- data in React can flow in one direction, from parent to child
- props can only be passed down from parent to child components

- when a component's state is updated, only its children are affected by the change
    - React re-renders the component and all its children when that component's state or props change

----------- Props vs state -----------

- state is data that a component owns
    - the data is defined locally within the component
    - the component also owns function to update that state
- props are pieces of data that a component receives from its parent
    - props are passed down from a parent to its children
- a component cannot directly change the value of a prop
    - the only way is to use the state setter function defined in the parent

--------- What does it mean to lift state up? -----------

- it is a way to share state between sibling components
- sometimes multiple components at the same level in the component tree will require the same data
- the only way to pass that data to those components is to lift that data up to their common parent component
- this will also ensure that the child components remain in sync with the data that they rely on
    - whenever that data will change, the child components will be re-rendered with the updated data
- data cannot move up or sideways; it can only move down from parent to children

---------- What is conditional rendering? ------------

- Conditional rendering refers to rendering a component or a React element when a certain condition is met
- for example, we can choose to render a loading spinner only in loading state (when data is being fetched from an API)

There are various ways we can do conditional rendering
- by using if-statements
- by using ternary operator
- by using short-circuit evaluation with logical AND operator (&&)

--------- Controlled vs uncontrolled components ---------

- they render form control elements, e.g. input, select, textarea
- in a controlled component, the form data lives in the component as its state and is managed by the component
- in an uncontrolled component, the form data is stored and managed by the form control elements internally
    - the uncontrolled component can access form data via refs

Controlled component
- in a controlled input, the input value is bound to the component's state
- the component controls the input value by passing into it the state value via props
- an onChange event handler is used to notify the component of an input change, and the component updates its state
    - the input receives the updated value via the 'value' prop
- the input will show whatever the value is for the state

Uncontrolled component
- an uncontrolled input is not bound to the component's state
- it stores and manages its own state internally
- the value of that input can be obtained by using a ref
    - the ref is used to access the underlying input DOM node and get its value

------------ What is a ref? -----------

- a ref is a way to access underlying DOM nodes or React elements
- every JSX element has a ref prop into which you can pass a ref
- this way, you can store a reference to that DOM node or React element
- it provides an escape hatch to reach out to the DOM and manipulate it directly
    - in React, you normally don't manipulate the DOM directly
    - you tell React what changes need to be made, React creates a virtual DOM accordingly, and then ReactDOM
    reaches out to the actual DOM and applies those changes
    - with refs, you are bypassing this process and getting a hold of the actual DOM

Use cases of refs
- setting focus on an input programmatically
- triggering certain animations

----------- Keys and their importance in rendering list items --------

- a key is a special prop that React uses to identify and keep track of individual list items
- a key value needs to be stable and unique
- a key acts as a unique identifier for a list item
- with the help of keys, React can keep track of any changes that may occur in a list
- Keys help React identify exactly which items have changed, are added, removed, or rearranged
    - this allows React to efficiently update and re-render the list to the DOM

- do not use the index as the value of the key prop
    - the index is not specific to an item; it only indicates the current position of the item in the list
    - indices will change if you remove an item or rearrange items in the list
    - as a result, keys of all the items will change, and React will re-render them even though their content didn't change at all
    - this is not efficient because we're having to recreate some DOM elements unnecessarily
    - If a componentâ€™s key changes, the component will be destroyed and re-created

---------- What is prop-drilling? -----------

- prop-drilling refers to the action of passing props from a parent component
to a deeply-nested component through each intermediate level of the component tree
- intermediate components may not need the prop at all, but the prop still needs to go through them
- when passing props, you cannot skip a level
- props can only be passed down from parent to its immediate child, and then that child can pass the prop down to its immediate child

------------ What is context? ----------

- context is a way to pass data to a tree of components without having to pass props through each level of the component tree
- context provides us with an easy way to store data that is needed by a tree of components in a central place
- a deeply-nested component can access the data without having to do prop-drilling

Provider
- the Provider component receives the value of a context and provides it to the components that subscribe to it

useContext
- subscribed components can use this hook to access the value of the context

- every subscribed component gets re-rendered when the value of the context changes, and the components receive the updated value

When should you use it?
- primarily used when some data needs to be accessed by many components at different nesting levels
- when you have data that is required by components in different parts of the component tree
- it is designed to share data that is considered global for a tree of components
- use it when you have to pass data to deeply-nested components

---------- What is a higher order component (HOC)? ----------

- A higher-order component (HOC) is an advanced technique or pattern in React for reusing component logic
- a higher-order component is a function that takes a component as an argument and returns a new component
- it takes a component and returns a more enhanced version of that component (with added functionality)

- a HOC is useful when you need to use the same logic or functionality in multiple components
- it allows us to share common functionality among different components without repeating the same logic

- a HOC should be a pure function

---------- Render prop ---------

- - it is a pattern or technique in React for sharing common logic in multiple components using a prop that takes a function
A component with a render prop takes a function that returns a React element
and calls it instead of implementing its own render logic.
- the render prop's function allows a component to dynamically render something based on what that function returns
    - this way, the component won't have to render something specific all the time
    - this makes the component reusable

- it is useful for sharing state or behavior that one component encapsulates with other components that need it
- it allows us to reuse the same logic in multiple components without repeating it

--------- What are hooks? --------

- hooks are special functions that allow us to 'hook' into certain features in React, e.g. adding state, performing side-effects

Why are hooks useful?
- hooks allow us to use state and other React features like lifecycle methods without using class components
- you can also define your own custom hooks and encapsulate some common logic or behavior into it that you can share across multiple components
    - this provides a more readable and elegant alternative to HOCs and render props
    that can lead to wrapper hell (using a lot of wrapper or container components)
    - with hooks, you don't need to create a separate wrapper that renders the component that you want to enhance

Rules of hooks
- hooks must start with 'use'
- you can only call hooks at the top-level of a component or a custom hook

--------- useEffect hook ----------

- the useEffect hook is used for performing side-effects in a React component
- it can behave as componentDidMount, componentDidUpdate, and componentWillUnmount
- it takes a callback that contains the logic for performing a side-effect
- useEffect will call that callback every time the component renders (default behavior)
- useEffect also takes a dependency array as its second argument
    - the callback will run every time one of the dependencies changes (like componentDidMount)
    - if you specify an empty dependency array, then the callback will only run
    once after the component renders for the first time (like componentDidMount)
- you can return a function from the useEffect callback
    - this function acts as a cleanup function that cleans up the effect
    - the cleanup function runs just before the component is removed from the DOM (like componentWillUnmount)
    - the cleanup function also runs before every re-render to clean up any previous effects

--------- React.memo() ---------

- it is a HOC that memoizes the component it receives
- the memoized component will only get re-rendered if one of its props changes
- if none of the props change, then React will skip re-rendering that component and simply use the memoized rendered result
- note that if the memoized component has a useState, useReducer or useContext Hook in its implementation,
it will still re-render when state or context changes.

- it behaves like shouldComponentUpdate lifecycle method

When to use it
- it may be useful when you have a large section of the component tree that renders the same thing with the same props provided
    - in that case, memoizing the top-level component in that branch can avoid a lot of unnecessary re-renders and give a performance boost
- usually for small apps with small component trees, this is not needed
- if your component has state or its props change frequently, then there's no point in memoizing that component

-------- useCallback hook ---------

- the useCallback hook receives a callback and a dependency array, and returns a memoized version of that callback
- the callback will only be re-created if one of the dependencies changes
    - the function will never be re-created if you specify an empty dependency array
- otherwise, react will use the memoized version of the callback

- normally, functions get recreated on every re-render
- so each time, it's a new function

- functions in JS are objects, and objects are reference types
- two objects are different entities even if they look exactly the same

When to use it
- when you have to pass callbacks down to memoized child components (via React.memo) as props
- when you have to specify a function as a dependency in other hooks, e.g. useEffect

---------- useMemo hook ---------

- it receives a callback and a dependency array, and memoizes the return value of that callback
- it will call the callback and recompute the return value only when one of the dependencies changes
- an empty dependency array tells React that the value will never have to be recomputed
- in the dependency array, you would normally specify data that is required for the calculation

When to use it
- when you need to avoid performing unnecessary expensive calculations on every render
- if the cost of performing some calculation outweighs the cost of memoization

----------- virtual DOM -----------

- it is a tree of React elements
- a representation of the actual DOM that is stored in memory
- the virtual DOM is simply a JS-object representation of what you want in the actual DOM
- whenever the state, props, or context of a component changes, React re-renders that component and constructs an updated virtual DOM
    - reconciliation is the process by which react detects changes to the UI or state and updates the virtual DOM
- the virtual DOM is always kept in sync with the actual DOM
- React compares the updated virtual DOM with the old virtual DOM and detects the changes that occurred
    - React uses its internal diffing algorithm to calculate differences between the two trees of React elements
- React informs ReactDOM of these changes and then ReactDOM updates the actual DOM accordingly